name: Commit stage

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    inputs:
      triggering-sha:
        required: true
        type: string



env:
  GITHUB_PAT: ${{ secrets.OBERDAN8_GHA_PAT }}
  COVERAGE: '0'
  PHP_EXTENSIONS: ctype, curl, gd, iconv, intl, opcache, openssl, mbstring, mysql, pdo_sqlite, xsl
  PHP_EXTENSIONS_CACHE_KEY: cache-php-extensions-v2

jobs:
  commit-checks:
    name: Commit checks
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    strategy:
      matrix:
        php:
          - '7.4'
          - '8.0'
      fail-fast: false
    steps:
      - name: Checkout on SHA-${{ inputs.triggering-sha }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.triggering-sha }}

      - name: Setup php extension cache environment
        if: ${{ vars.USE_PHP_EXTENSION_CACHE }}
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache PHP extensions
        if: ${{ vars.USE_PHP_EXTENSION_CACHE }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@2.31.0
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          coverage: none
          tools: composer, composer-normalize:2.16.0

      - name: Set Composer Cache Directory
        if: ${{ vars.USE_COMPOSER_CACHE }}
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        if: ${{ vars.USE_COMPOSER_CACHE }}
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php }}-composer-

      - name: Install Composer app dependencies
        run: |
          composer install --prefer-dist --no-progress --no-scripts --ansi

      - name: Install Composer tools dependencies
        run: |
          composer bin all install --ansi

      - name: Run composer validate
        run: |
          composer validate --strict --ansi
        continue-on-error: true
          # Ignore error:
          # - require.composer/package-versions-deprecated : exact version constraints (1.11.99.5) should be avoided if the package follows semantic versioning

      - name: Run composer normalize
        if: always()
        run: |
          composer-normalize --dry-run --ansi

      - name: Run ecs CODING STANDARDS
        if: always()
        run: |
          ./vendor/bin/ecs --ansi

      - name: Run psalm STATIC ANALYSIS
        if: always()
        run: |
          ./bin/console lint:container -e dev --ansi
          ./vendor/bin/psalm --config psalm.xml --diff --show-info=false --stats --threads=4 --no-cache

      - name: Run phpstan STATIC ANALYSIS
        if: always()
        run: |
          ./bin/console lint:container -e dev --ansi
          ./bin/phpunit install
          ./vendor/bin/phpstan

      - name: Run rector MAINTENANCE
        if: always()
        run: |
          ./vendor/bin/rector process --dry-run --ansi

      - name: Run Deptrac architecture check (Booking domain isolation)
        run: ./vendor/bin/deptrac analyse core/depfile-booking.yaml

      - name: Run Deptrac architecture check (Bounded Context)
        run: ./vendor/bin/deptrac analyse core/depfile-booking.yaml

#      - name: Run PhpArkitect
#        if: always()
#        run: |
#          ./vendor/bin/phparkitect check --ansi


      #
      # Additional checks, they are precondition before
      # 'acceptance stage' fase of the CI
      #

      - name: Run yml linter on configurations files
        run: |
          ./bin/console lint:yaml config/ --ansi
          ./bin/console lint:yaml core/booking/src/Infrastructure/Framework

      - name: Run linter on symfony containers (prod|dev)
        run: |
          ./bin/console lint:container -e prod --ansi
          ./bin/console lint:container -e dev --ansi

      - name: Run linter on all twig templates
        run: |
          ./bin/console lint:twig --ansi
        env:
          APP_ENV: dev

  unit-test:
    name: Unit tests
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    strategy:
      matrix:
        php:
          - '7.4'
          - '8.0'
          #- '8.1'
      fail-fast: true
    steps:
      - name: Checkout on SHA-${{ inputs.triggering-sha }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.triggering-sha }}

      - name: Setup php extension cache environment
        if: ${{ vars.USE_PHP_EXTENSION_CACHE }}
        id: cache-php-extensions
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}

      - name: Cache PHP extensions
        if: ${{ vars.USE_PHP_EXTENSION_CACHE }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-php-extensions.outputs.dir }}
          key: ${{ steps.cache-php-extensions.outputs.key }}
          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}

      - name: Setup PHP
        uses: shivammathur/setup-php@2.31.0
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: memory_limit=-1
          coverage: none
          tools: composer, composer-normalize:2.16.0

      - name: Set Composer Cache Directory
        if: ${{ vars.USE_COMPOSER_CACHE }}
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        if: ${{ vars.USE_COMPOSER_CACHE }}
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --ansi --no-scripts

      - name: Install phpunit dependencies
        run: bin/phpunit install

      - name: Run unit test suite
        #run: bin/phpunit --configuration core/booking/tests/Unit/phpunit.xml
        run: bin/phpunit --testsuite=unit
        env:
          SYMFONY_DEPRECATIONS_HELPER: disabled


#  booking-integration-test:
#    runs-on: ubuntu-latest
#    timeout-minutes: 10
#    services:
#      mysql:
#        image: mariadb:10.3.29
#        env:
#          MYSQL_ROOT_PASSWORD: test
#          MYSQL_USER: test
#          MYSQL_PASSWORD: test
#          MYSQL_DATABASE: symfony_test
#        ports:
#          - 3306/tcp
#        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
#    strategy:
#      matrix:
#        php:
#          - '7.4'
#      fail-fast: true
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Setup cache environment
#        id: cache-php-extensions
#        uses: shivammathur/cache-extensions@v1
#        with:
#          php-version: ${{ matrix.php }}
#          extensions: ${{ env.PHP_EXTENSIONS }}
#          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}
#
#      - name: Cache extensions
#        uses: actions/cache@v3
#        with:
#          path: ${{ steps.cache-php-extensions.outputs.dir }}
#          key: ${{ steps.cache-php-extensions.outputs.key }}
#          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}
#
#      - name: Setup PHP
#        uses: shivammathur/setup-php@v2
#        with:
#          php-version: ${{ matrix.php }}
#          extensions: ${{ env.PHP_EXTENSIONS }}
#          ini-values: memory_limit=-1
#          coverage: none
#          tools: symfony
#
#      - name: Get Composer Cache Directory
#        id: composer-cache
#        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
#
#      - name: Cache dependencies
#        uses: actions/cache@v3
#        with:
#          path: ${{ steps.composer-cache.outputs.dir }}
#          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
#          restore-keys: ${{ runner.os }}-composer-
#
#      - name: Install Composer dependencies
#        run: composer install --prefer-dist --no-progress --no-suggest --ansi --no-scripts
#
#      - name: Install phpunit dependencies
#        run: bin/phpunit install
#
#      - name: Run Migration & test fixtures
#        run: |
#          #php bin/console doctrine:schema:update --force -e test || echo "No migrations found or schema update failed"
#          php bin/console doctrine:migrations:migrate -e test --no-interaction|| echo "No migrations found or migration failed"
#        env:
#          DATABASE_URL: mysql://root:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony_test?serverVersion=mariadb-10.3.29
#
#      - name: Run integration test suite
#        run: bin/phpunit --configuration core/booking/tests/Integration/phpunit.xml
#        env:
#          PANTHER_APP_ENV: test
#          DATABASE_URL: mysql://test:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony_test?serverVersion=mariadb-10.3.29
#          SYMFONY_DEPRECATIONS_HELPER: disabled
#
#
#  symfony-test:
#    needs: [booking-unit-test,booking-integration-test,architecture-check,coding-standard,phpstan,psalm]
#    runs-on: ubuntu-latest
#    timeout-minutes: 15
#    services:
#      mysql:
#        image: mariadb:10.3.29
#        env:
#          MYSQL_ROOT_PASSWORD: test
#          MYSQL_USER: test
#          MYSQL_PASSWORD: test
#          MYSQL_DATABASE: symfony_test
#        ports:
#          - 3306/tcp
#        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
#
#    strategy:
#      matrix:
#        php:
#          - '7.4'
#        node:
#          - '16.x'
#      fail-fast: true
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Setup cache environment
#        id: cache-php-extensions
#        uses: shivammathur/cache-extensions@v1
#        with:
#          php-version: ${{ matrix.php }}
#          extensions: ${{ env.PHP_EXTENSIONS }}
#          key: ${{ env.PHP_EXTENSIONS_CACHE_KEY }}
#
#      - name: Cache extensions
#        uses: actions/cache@v3
#        with:
#          path: ${{ steps.cache-php-extensions.outputs.dir }}
#          key: ${{ steps.cache-php-extensions.outputs.key }}
#          restore-keys: ${{ steps.cache-php-extensions.outputs.key }}
#
#      - name: Setup PHP
#        uses: shivammathur/setup-php@v2
#        with:
#          php-version: ${{ matrix.php }}
#          extensions: ${{ env.PHP_EXTENSIONS }}
#          ini-values: memory_limit=-1
#          coverage: none
#          tools: symfony
#
#      - name: Get Composer Cache Directory
#        id: composer-cache
#        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
#
#      - name: Cache dependencies
#        uses: actions/cache@v3
#        with:
#          path: ${{ steps.composer-cache.outputs.dir }}
#          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
#          restore-keys: ${{ runner.os }}-composer-
#
#      - name: Install Composer dependencies
#        run: composer install --prefer-dist --no-progress --no-suggest --ansi --no-scripts
#
#      - name: Install phpunit dependencies
#        run: bin/phpunit install
#
#      - name: Setup Node
#        uses: actions/setup-node@v1
#        with:
#          node-version: "${{ matrix.node }}"
#
#      - name: Get Yarn cache directory
#        id: yarn-cache
#        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
#
#      - name: Cache Yarn
#        uses: actions/cache@v3
#        with:
#          path: ${{ steps.yarn-cache.outputs.dir }}
#          key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-node-${{ matrix.node }}-yarn-
#
#      - name: Install JS dependencies
#        run: yarn install
#
#      - name: Build assets
#        run: |
#          bin/console assets:install public -vvv -e test
#          yarn build
#
#      - name: Fix .htaccess
#        run: mv public/.htaccess public/.htaccess.dist
#
#      - name: Run webserver
#        run: symfony server:start --port=8080 --dir=public --daemon --no-tls
#
#      - name: Run application container lint
#        run: ./bin/console lint:container
#
#      - name: Run twig template lint
#        run: ./bin/console lint:twig templates --env=prod
#
#      - name: Run Migration & test fixtures
#        run: |
#          #php bin/console doctrine:schema:update --force -e test || echo "No migrations found or schema update failed"
#          php bin/console doctrine:migrations:migrate -e test --no-interaction|| echo "No migrations found or migration failed"
#          php bin/console doctrine:fixtures:load --group=test -e test --no-interaction
#        env:
#          DATABASE_URL: mysql://root:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony_test?serverVersion=mariadb-10.3.29
#
#      - name: Run database schema mapping validation
#        run: ./bin/console doctrine:schema:validate -e test
#        env:
#          DATABASE_URL: mysql://root:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony_test?serverVersion=mariadb-10.3.29
#        continue-on-error: true
#
#      - name: Run UNIT test
#        run: |
#          bin/phpunit tests/Unit
#        env:
#          PANTHER_APP_ENV: test
#          DATABASE_URL: mysql://test:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony_test?serverVersion=mariadb-10.3.29
#          SYMFONY_DEPRECATIONS_HELPER: disabled
#
#      - name: Run INTEGRATION test
#        run: |
#          bin/phpunit tests/Integration
#        env:
#          PANTHER_APP_ENV: test
#          DATABASE_URL: mysql://test:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony_test?serverVersion=mariadb-10.3.29
#          SYMFONY_DEPRECATIONS_HELPER: disabled
#
#      - name: Run FUNCTIONAL test
#        run: |
#          bin/phpunit tests/Functional
#        env:
#          PANTHER_APP_ENV: test
#          DATABASE_URL: mysql://test:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony_test?serverVersion=mariadb-10.3.29
#          SYMFONY_DEPRECATIONS_HELPER: disabled
#
#      - name: Run E2E test
#        run: |
#          bin/phpunit tests/E2E/Backoffice
#          bin/phpunit tests/E2E/AdozioniReservation
#          bin/phpunit tests/E2E/RegularReservation
#        env:
#          PANTHER_APP_ENV: test
#          DATABASE_URL: mysql://test:test@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/symfony_test?serverVersion=mariadb-10.3.29
#          SYMFONY_DEPRECATIONS_HELPER: disabled
